from decimal import Decimal as D
import operator

from aiogram import Bot, types as t
from aiogram_dialog import Dialog, DialogManager, ShowMode, Window
from aiogram_dialog.widgets import text, kbd
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from gcbot.application import commands as cmd
from gcbot.application.user_service import UserService
from gcbot.port.adapter.aiogram_resources.dialogs.dialogs_food.dialog_state import CalculateNormaDayDialog
from gcbot.port.adapter.aiogram_resources.dialogs.widgets import (
    DailyNormResultWindow, 
    NormaDayTextInput
)
from gcbot.port.adapter.aiogram_resources.query_services.user_query_service import UserQueryService


async def get_data_targets(**kwargs):
    target_types = [
        ("–ë—ã—Å—Ç—Ä–æ –ø–æ—Ö—É–¥–µ—Ç—å", "-0.8"),
        ("–ü–ª–∞–≤–Ω–æ –ø–æ—Ö—É–¥–µ—Ç—å", "-0.9"),
        ("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", "1"),
        ("–ü–ª–∞–≤–Ω—ã–π –Ω–∞–±–æ—Ä", "1.1"),
        ("–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä", "1.2"),
    ]
    return {"targets": target_types}


async def get_data_coefficients(**kwargs):
    activity_types = [
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", "1.2"),
        ("–°–ª–∞–±–∞—è", "1.375"),
        ("–°—Ä–µ–¥–Ω—è—è", "1.55"),
        ("–í—ã—Å–æ–∫–∞—è", "1.725"),
        ("–ù–µ –∑–Ω–∞—é üòî", "1"),
    ]
    return {"coefficients": activity_types}


@inject
async def selected_target(
    callback: t.CallbackQuery, 
    widget, 
    dialog_manager: DialogManager, 
    item_id,
    service: FromDishka[UserService] 
):
    calculate_result = await service \
        .calculate_norma(
            cmd.CalculateK—ÅalCommand(
                callback.from_user.id,
                D(dialog_manager.find("input_age").get_value()),
                D(dialog_manager.find("input_hieght").get_value()),
                D(dialog_manager.find("input_weight").get_value()),
                D(dialog_manager.dialog_data["coefficient"]),
                D(item_id)
            )
        )
    dialog_manager.dialog_data.update(calculate_result)
    await dialog_manager.next()


async def get_result_calculated_values(dialog_manager: DialogManager, **kwargs):
    return dialog_manager.dialog_data["norma_day"]


@inject
async def selected_coefficient(
    callback: t.CallbackQuery, 
    widget, 
    dialog_manager: DialogManager, 
    item_id,
    query_service: FromDishka[UserQueryService]
):
    if item_id == "1":
        file_id = await query_service.query_video_note()
        await callback.message.answer_video_note(file_id)
        dialog_manager.show_mode = ShowMode.DELETE_AND_SEND
    else:
        dialog_manager.dialog_data["coefficient"] = item_id
        await dialog_manager.next()


calculate_norma_day_dialog = Dialog(
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 72üëá"
        ),
        NormaDayTextInput("input_weight"),
        state=CalculateNormaDayDialog.start
    ),
    Window(
        text.Const(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 165üëá"
        ),
        NormaDayTextInput("input_hieght"),
        state=CalculateNormaDayDialog.hieght
    ),
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç).\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 35üëá"
        ),
        NormaDayTextInput("input_age"),
        state=CalculateNormaDayDialog.age
    ),
    Window(
        text.Const("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"),
        kbd.Column(
            kbd.Select(
                text.Format("{item[0]}"),
                id="selected_coefficient",
                item_id_getter=operator.itemgetter(1),
                items="coefficients",
                on_click=selected_coefficient
            )
        ),
        state=CalculateNormaDayDialog.activity,
        getter=get_data_coefficients
    ),
    Window(
        text.Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –º–µ–Ω—é:"),
        kbd.Column(
            kbd.Select(
                text.Format("{item[0]}"),
                id="selected_target",
                item_id_getter=operator.itemgetter(1),
                items="targets",
                on_click=selected_target
            )
        ),
        state=CalculateNormaDayDialog.target,
        getter=get_data_targets
    ),
    DailyNormResultWindow(
        CalculateNormaDayDialog.end, 
        get_result_calculated_values
    )
)